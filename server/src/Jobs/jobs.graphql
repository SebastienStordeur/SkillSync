type Query {
  getJobs: [Job]
  getJob(id: ID): getJobResponse
}

type Mutation {
  createJob(job: JobInput, userId: ID): Job
  deleteJob(id: ID!, userId: ID): DeleteJobResponse
  applyToJob(id: ID!, userId: ID): applicationResponse
}

type Job {
  id: ID
  title: String!
  description: String!
  company: String!
  salary: Int!
  location: String
  extra: Extra
  userId: ID
}

type Extra {
  remote: Boolean
  type: String
  vacations: Int
}

input ExtraInput {
  remote: Boolean
  type: String
  vacations: Int
}

input JobInput {
  title: String!
  description: String
  company: String!
  salary: Int
  location: String
  extra: ExtraInput
}

type DeleteJobResponse {
  success: Boolean
  message: String
}

type getJobResponse {
  success: Boolean!
  message: String
  job: Job!
  recommendations: [Job]!
}

type applicationResponse {
  success: Boolean!
  message: String
}
